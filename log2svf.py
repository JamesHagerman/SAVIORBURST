#!/usr/bin/python

###############
# Copyright (c) 2015, syncsrc.org
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
###############


info = """
This script will take an OpenOCD log file and generate an SVF from it.
"""

epi = """
This script parses debug messages from the jtag_build_buffer() function. To \
enable JTAG debug printing, OpenOCD must be configured with the '--enable-verbose-jtag-io' \
option and run with the '-d 1' switch. It is also recommended to run with '-c init -c \
"poll off"' to disable target status polling.
"""

import sys
import os
import re
import argparse

## Get command-line options
parser = argparse.ArgumentParser(description=info, version="1.2.1", epilog=epi)
parser.add_argument('-w', '--warn', action="store_true", dest='warn', default=False,
                  help='Issue warnings for non-fatal errors instead of exiting')
parser.add_argument('-j', '--jtag', dest='jtag', default='src/jtag/jtag.h', 
                  help='file to read DEBUG_JTAG parameters from (defaults to src/jtag/jtag.h)')
parser.add_argument('-s', '--svf', dest='svf', default=None, 
                  help='Output file')
parser.add_argument('-l', '--log', dest='log', nargs='+', required=True,
                  help='OpenOCD log file(s) to parse. If multiple files are specified commands \
                  from all log files will be concatenated into a single SVF')
opts = parser.parse_args()


## Use output file if specified, otherwise print to stdout
if opts.svf is None:
    out = sys.stdout
else:
    out = open(opts.svf, 'w')


## determine the maximum length for debug printing of scan data
## if any scans exceed this length the log may be incomplete
max_length = 0
if os.path.isfile(opts.jtag):
    with open(opts.jtag, 'r') as f:
        for line in f:
            debug_jtag = re.search(r'^#define DEBUG_JTAG_IOZ (\d+)', line)
            if (debug_jtag != None):
                if (max_length != 0):
                    raise Exception('DEBUG_JTAG_IOZ defined more than once')
                else:
                    max_length = int(debug_jtag.group(1))
else:
    max_length = 64 if (sys.maxsize > 2**32) else 32


## Common SVF initialization commands
## NOTE: PAUSEIR/PAUSEDR may be better end states for some targets
## FIXME: add explicit transition to TRESET at the beginning?
print >>out, "!Begin Test Program"
print >>out, "TRST OFF;"
print >>out, "ENDIR IDLE;"
print >>out, "ENDDR IDLE;"


## IR & DR scan info is pulled from debug messages generated by the 
## jtag_build_buffer() function. When such messages are found, read
## the scan data and length and assemble into SIR and SDR commands in
## SVF format.
for log in opts.log:
    f = open(log, 'r')
    line = f.readline()
    while line != '':
        scanstart = re.search(r'jtag_build_buffer\(\): (\w+) num_fields: (\d+)', line)
        runtest = re.search(r'script_debug\(\): command - runtest ocd_runtest (\d+)', line)
        if (runtest != None):
            print >>out, "RUNTEST IDLE", runtest.group(1), "TCK ENDSTATE IDLE;"
        elif (scanstart != None):
            fields = int(scanstart.group(2))
            if scanstart.group(1) == "IRSCAN":
                command = "SIR"
            elif scanstart.group(1) == "DRSCAN":
                command = "SDR"
            else: 
                raise Exception('Not expecting to shift data while in', scanstart.group(1))
            
            data = 0L
            length = 0
            for i in range(fields):
                line = f.readline()
                scandata = re.search(r'jtag_build_buffer\(\): fields\[(\d+)\].out_value\[(\d+)\]: (\w+)', line)
                if (scandata == None):
                    raise Exception('Could not find scan data.')
                else:
                    ## Check if data is missing from log, resulting SVF may be wrong/incomplete
                    if (max_length < int(scandata.group(2))):
                        warning = '!WARNING: Scan length of ' + scandata.group(2) + \
                                  ' exceeded length of data from log file: ' + str(max_length)
                        if opts.warn:
                            print >>out, warning
                            print >>sys.stderr, warning
                        else:
                            raise Exception(warning)

                    ## If fields are out out-of-order shift data won't be built correctly
                    if (int(scandata.group(1)) != i):
                        raise Exception('Scan fields out-of-order. Found field ' + \
                                        scandata.group(1) + ' when expecting field ' + str(i))

                    ## Assemble shift data from all fields into a signle variable 
                    ## adding zeros to the left of the current data is a NO-OP
                    if scandata.group(3) != 'NULL':
                        data = (long(scandata.group(3), 16) << length) | data
                    length += int(scandata.group(2))
            
            ## format shift data with leading zeros and write SVF command
            datastr = '{num:0{width}X}'.format(num=data, width=-(-length//4))
            print >>out, command, length, "TDI (" + datastr + ");"

        line = f.readline()
    f.close()


## Clock the TAP a few more times just for good measure
## (last IR/DR scan may have been something that required it)
print >>out, "RUNTEST IDLE 100 TCK ENDSTATE IDLE;"
## FIXME: add explicit transition to TRESET at the end?
print >>out, "!End Test Program"
out.close()
